{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Resources and Guides for Earth Observation Application Packages","text":"<p>This project includes several repositories designed to provide guidance and training material for developing and executing Earth Observation (EO) Application Packages in compliance with the OGC Best Practice for Earth Observation Application Package. </p> <p>The repositories aim to:</p> <ul> <li>Help developers create portable and deployable EO applications using the Common Workflow Language (CWL)</li> <li>provide an overview of the CWL, its key concepts </li> <li>Show how to build a CWL-based EO application using a practical examples then used in several execution scenarios. </li> </ul> <p>The repositories are listed below, and described in detailed in the Repositories section:</p> <p>Application Package and CWL as a solution for EO portability</p> <p>This module provides an light introduction to CWL as a solution for the portability of EO applications.</p> <p>Understanding STAC for input/output data modelling in EO Applications</p> <p>This module includes documentation and notebooks for understanding:</p> <ul> <li>The role of STAC as input/output data manifests in EO applications and a hands-on with real-life scenarios.</li> <li>How platforms manage the stage-in and stage-out operations </li> </ul> <p>Quickwin - A simple Application Package for getting started</p> <p>This module is designed for developers, scientists, and EO enthusiasts who want to get started with the EO Application Package.</p> <p>Mastering EO Application Packaging with CWL</p> <p>This module is designed for developers, scientists, and EO enthusiasts who want to enhance their skills in creating and sharing EO Application Packages.</p> <p>Quickwin - An Application Package with inline Python code</p> <p>This tutorial is designed for developers, scientists, and Earth observation enthusiasts who want to get quickly started with the EO Application Package.</p> <p>OGC API Processes with ZOO Project</p> <p>This module is designed for developers, scientists, and Earth observation enthusiasts who want to:</p> <ul> <li>Get acquainted with the OGC API Processes standard and its ZOO-Project implementation</li> <li>Deploy and run Application Packages as web services</li> </ul> <p>Open and reproducible EO Application Package</p> <p>Many cloud-based solutions for workflows in EO are available to users today, but only few support reproducibility or comply with FAIR data principles. </p> <p>This short module demonstrates how EO Application Packages meet these requirements.</p> <p>Inference with the EO Application Package</p> <p>This tutorial addresses the packaging of the an EO application that does the inference using an ONNX model. </p>"},{"location":"dev-platform/","title":"How to run the modules","text":"<p>Each module brings its own set of requirements and runtime environment. Some may only require simple python code, others may require building and running containers or deploy several deployments on a kubernetes cluster.</p> <p>The modules are thus supported by development platforms that may run on local computers and rely on a local ande development kubernetes cluster.</p>"},{"location":"dev-platform/#requirements","title":"Requirements","text":"<p>The development platforms relies on the requirements and tools below:</p>"},{"location":"dev-platform/#minikube","title":"Minikube","text":"<p>Minikube runs a local Kubernetes cluster, ideal for development and testing. </p> <p>Minikube is installed by following the guide here.</p> <p>Verify the installation with:</p> <pre><code>minikube version\n</code></pre> <p>Start the local minikube instance with:</p> <pre><code>minikube start\n</code></pre> <p>In Ubuntu 24.04, this will typically show:</p> <pre><code>\ud83d\ude04  minikube v1.33.1 on Ubuntu 24.04\n\ud83c\udf89  minikube 1.34.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.34.0\n\ud83d\udca1  To disable this notice, run: 'minikube config set WantUpdateNotification false'\n\n\u2728  Using the docker driver based on existing profile\n\ud83d\udc4d  Starting \"minikube\" primary control-plane node in \"minikube\" cluster\n\ud83d\ude9c  Pulling base image v0.0.44 ...\n\ud83d\udd04  Restarting existing docker container for \"minikube\" ...\n\ud83d\udc33  Preparing Kubernetes v1.30.0 on Docker 26.1.1 ...\n\ud83d\udd0e  Verifying Kubernetes components...\n    \u25aa Using image gcr.io/k8s-minikube/storage-provisioner:v5\n\ud83c\udf1f  Enabled addons: storage-provisioner, default-storageclass\n\ud83c\udfc4  Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n</code></pre>"},{"location":"dev-platform/#kubectl","title":"Kubectl","text":"<p>Kubectl is a command-line tool for interacting with Kubernetes clusters. It allows you to manage and inspect cluster resources. While not strictly required, it's highly recommended for debugging and interacting with your Kubernetes environment.</p> <p>Kubectl is installed by following the instructions documented here.</p> <p>Verify the installation with:</p> <pre><code>kubectl version\n</code></pre> <p>If the minikube cluster is up, this will typically display:</p> <pre><code>Client Version: v1.30.1\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.30.0\n</code></pre>"},{"location":"dev-platform/#skaffold","title":"Skaffold","text":"<p>Skaffold is used to build, push, and deploy applications to Kubernetes. </p> <p>Skaffold is installed by following the instructions documented here.</p> <p>Verify the installation with:</p> <pre><code>skaffold version\n</code></pre>"},{"location":"dev-platform/#helm","title":"Helm","text":"<p>Helm is a package manager for Kubernetes, enabling you to manage Kubernetes applications easily. </p> <p>Helm is installed by following the steps documented here.</p> <p>Verify the installation with:</p> <pre><code>helm version\n</code></pre>"},{"location":"dev-platform/#clone-the-development-platforms-repository","title":"Clone the development platforms repository","text":"<p>The development platforms enabling rununing the training modules are located in the git repository https://github.com/eoap/dev-platform-eoap.</p> <p>Clone this repository with:</p> <pre><code>git clone https://github.com/eoap/dev-platform-eoap.git\n</code></pre> <p>Then change directory to the cloned repository folder:</p> <pre><code>cd dev-platform-eoap\n</code></pre> <p>Each development platform is in a folder named after the learning module.</p> <p>Example:</p> <p>The module Mastering Earth Observation Application Packaging with CWL is in git repository https://github.com/eoap/mastering-app-package.</p> <p>Its development platform it in the folder <code>mastering-app-package</code>.</p>"},{"location":"dev-platform/#run-a-development-platform","title":"Run a development platform","text":"<p>Change directory to the learning module, e.g.:</p> <pre><code>cd mastering-app-package\n</code></pre> <p>Install the development platform with:</p> <pre><code>skaffold dev\n</code></pre>"},{"location":"repositories/","title":"Repositories","text":"<p>The repositories included in the EOAP project are: </p> <ul> <li>\"Application Package and CWL as a solution for EO portability\"</li> <li>\"Understanding STAC for input/output data modelling in EO Applications\"</li> <li>\"Quickwin - A simple Application Package for getting started\"</li> <li>\"Mastering EO Application Packaging with CWL\"</li> <li>\"Quickwin - An Application Package with inline Python code\"</li> <li>\"Open and reproducible EO Application Package\"</li> <li>\"Inference with the EO Application Package\"</li> </ul> <p>In each repository section are provided badges for status and stability, along with links to the repository itself and its online documentation.</p>"},{"location":"repositories/#application-package-and-cwl-as-a-solution-for-earth-observation-portability","title":"Application Package and CWL as a solution for Earth Observation portability","text":"<p>This documentation provides an introduction to CWL as a solution for the portability of EO applications.</p> <ul> <li>Documentation available at: https://eoap.github.io/cwl-eoap/</li> <li>Repository available at: https://github.com/eoap/cwl-eoap</li> </ul>"},{"location":"repositories/#understanding-stac-for-inputoutput-data-modelling-in-earth-observation-applications","title":"Understanding STAC for input/output data modelling in Earth Observation Applications","text":"<p>Documentation and notebooks for understanding the role of STAC as input/output data manifests in EO applications and a hands-on with real-life scenarios.</p> <ul> <li>Documentation available at: https://eoap.github.io/stac-eoap/</li> <li>Repository available at: https://github.com/eoap/stac-eoap</li> </ul>"},{"location":"repositories/#quickwin-a-simple-application-package-for-getting-started","title":"Quickwin - A simple Application Package for getting started","text":"<p>This tutorial is designed for developers, scientists, and EO enthusiasts who want to get started with the EO Application Package.</p> <ul> <li>Documentation available at: https://eoap.github.io/quickwin</li> <li>Repository available at: https://github.com/eoap/quickwin </li> </ul>"},{"location":"repositories/#mastering-earth-observation-application-packaging-with-cwl","title":"Mastering Earth Observation Application Packaging with CWL","text":"<p>This tutorial is designed for developers, scientists, and EO enthusiasts who want to enhance their skills in creating and sharing EO Application Packages.</p> <ul> <li>Documentation available at: https://eoap.github.io/mastering-app-package</li> <li>Repository available at: https://github.com/eoap/mastering-app-package</li> </ul>"},{"location":"repositories/#quickwin-an-application-package-with-inline-python-code","title":"Quickwin - An Application Package with inline Python code","text":"<p>This tutorial is designed for developers, scientists, and Earth observation enthusiasts who want to get started with the EO Application Package.</p> <ul> <li>Documentation available at: https://eoap.github.io/quickwin-inline-code/</li> <li>Repository available at: https://github.com/eoap/quickwin-inline-code</li> </ul>"},{"location":"repositories/#ogc-api-processes-with-zoo-project","title":"OGC API Processes with ZOO Project","text":"<p>This tutorial is designed for developers, scientists, and Earth observation enthusiasts who want to get acquainted with the ZOO-Project OGC API Processes implementation to deploy and run Application Packages as web services</p> <ul> <li>Documentation available at: https://eoap.github.io/ogc-api-processes-with-zoo/</li> <li>Repository available at: https://github.com/eoap/ogc-api-processes-with-zoo/</li> </ul>"},{"location":"repositories/#open-and-reproducible-eo-application-package","title":"Open and reproducible EO Application Package","text":"<p>Many cloud-based solutions for workflows in EO are available to users today, but only few support reproducibility or comply with FAIR data principles. </p> <p>This short tutorial demonstrates how EO Application Packages meet these requirements.</p> <ul> <li>Documentation available at: https://eoap.github.io/open-reproducible-app-package</li> <li>Repository available at: https://github.com/eoap/open-reproducible-app-package</li> </ul>"},{"location":"repositories/#inference-with-the-eo-application-package","title":"Inference with the EO Application Package","text":"<p>This tutorial addresses the packaging of the inference using an ONNX model. </p> <ul> <li>Documentation available at: https://eoap.github.io/inference-eoap</li> <li>Repository available at: https://github.com/eoap/inference-eoap</li> </ul>"},{"location":"adds/references/","title":"References","text":""},{"location":"adds/references/#common-workflow-language-cwl","title":"Common Workflow Language (CWL)","text":"<p>CWL User Guide, a guide to introduce you to writing workflows using the CWL open standards</p> <ul> <li>User guide available at: https://www.commonwl.org/user_guide/</li> </ul> <p>Specification and standards</p> <ul> <li>Common Workflow Language specification: https://www.commonwl.org/specification/</li> <li>Common Workflow Language Standards, v1.2: https://www.commonwl.org/v1.2/</li> <li>Common Workflow Language Standards, v1.1: https://www.commonwl.org/v1.1/</li> <li>Common Workflow Language Standards, v1.0.2: https://www.commonwl.org/v1.0/</li> </ul>"},{"location":"adds/references/#ogc-documents","title":"OGC documents","text":"<ul> <li>OGC 20-089r1 Best Practice for Earth Observation Application Package: https://docs.ogc.org/bp/20-089r1.html</li> <li>OGC 20-073: OGC Earth Observation Applications Pilot: Summary Engineering Report: http://docs.opengeospatial.org/per/20-073.html</li> <li>OGC 20-042: OGC Earth Observations Applications Pilot: Terradue Engineering Report: http://docs.opengeospatial.org/per/20-042.html</li> </ul>"},{"location":"adds/references/#spatiotemporal-asset-catalogs","title":"SpatioTemporal Asset Catalogs","text":"<ul> <li>STAC Item is the core atomic unit, representing a single spatiotemporal asset as a GeoJSON feature plus datetime and links: https://github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md</li> <li>STAC Catalog is a simple, flexible JSON file of links that provides a structure to organize and browse STAC Items. A series of best practices helps make recommendations for creating real world STAC Catalogs: https://github.com/radiantearth/stac-spec/blob/master/catalog-spec/catalog-spec.md</li> <li>STAC Collection is an extension of the STAC Catalog with additional information such as the extents, license, keywords, providers, etc that describe STAC Items that fall within the Collection: https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md</li> <li>STAC API provides a RESTful endpoint that enables search of STAC Items, specified in OpenAPI, following OGC's WFS 3: https://github.com/radiantearth/stac-api-spec</li> </ul>"},{"location":"adds/tools/","title":"Tools","text":"<ul> <li>cwltool the reference reference implementation of the Common Workflow Language standards: https://github.com/common-workflow-language/cwltool</li> <li>calrissian a CWL runner for Kubernetes: https://duke-gcb.github.io/calrissian/</li> </ul>"}]}